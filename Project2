// Yash Kulkarni
// Diffusion Coefficient
// Forcing Function
// Dirichlet Boundary Values
// Refrence Finite Element
// Quadrature Rule


#include <deal.II/grid/tria.h>
#include <deal.II/grid/grid_generator.h>
#include <deal.II/grid/grid_out.h>

#include <deal.II/dofs/dof_handler.h>
#include <deal.II/dofs/dof_tools.h>
#include <deal.II/dofs/dof_renumbering.h>

#include <deal.II/fe/fe_q.h>
#include <deal.II/fe/fe_values.h>
#include <deal.II/base/quadrature_lib.h>
#include <deal.II/base/function.h>
#include <deal.II/base/logstream.h>
#include <deal.II/base/work_stream.h>
#include <deal.II/base/multithread_info.h>
#include <deal.II/base/tensor_function.h>
#include <deal.II/base/convergence_table.h>
#include <deal.II/base/smartpointer.h>

#include <deal.II/numerics/vector_tools.h>
#include <deal.II/numerics/matrix_tools.h>
#include <deal.II/numerics/data_out.h>
#include <deal.II/numerics/error_estimator.h>

#include <deal.II/lac/vector.h>
#include <deal.II/lac/full_matrix.h>
#include <deal.II/lac/sparse_matrix.h>
#include <deal.II/lac/dynamic_sparsity_pattern.h>
#include <deal.II/lac/solver_cg.h>
#include <deal.II/lac/precondition.h>
#include <deal.II/lac/affine_constraints.h>

#include <fstream>
#include <iostream>
#include <cmath>

using namespace dealii;


template <int dim>
class Step4
{
public:
  enum RefinementMode
  {
    global_refinement,
    adaptive_refinement
  };
  
    Step4(const FiniteElement<dim> &fe,
        const RefinementMode      refinement_mode);
  void run();

private:
//  void make_grid();
  void setup_system();
  void assemble_system();
//  void refine_grid()
  void solve();
  void refine_grid();
  void process_solution(const unsigned int cycle);
//  void output_results() const;

  Triangulation<dim> triangulation;
//  FE_Q<dim>          fe;
  DoFHandler<dim>    dof_handler;

  SmartPointer<const FiniteElement<dim>> fe;
  AffineConstraints<double> hanging_node_constraints;

  SparsityPattern      sparsity_pattern;
  SparseMatrix<double> system_matrix;

  Vector<double> solution;
  Vector<double> system_rhs;

  const RefinementMode refinement_mode;
  ConvergenceTable convergence_table;
};

template <int dim>
class Solution : public Function<dim>
{
public:
  virtual double value(const Point<dim> & p,
                       const unsigned int component=0) const override;
};

template <int dim>
class RightHandSide : public Function<dim>
{
public:
  virtual double value(const Point<dim> & p,
                       const unsigned int component = 0) const override;
};

template <int dim>
class BoundaryValues : public Function<dim>
{
public:
  virtual double value(const Point<dim> & p,
                       const unsigned int component = 0) const override;
};

template <int dim>
class Diffusion : public TensorFunction<1,dim>
{
public:
  virtual Tensor<1,dim> value(const Point<dim> &p) const override;
};

template <int dim>
double Solution<dim>::value(const Point<dim> &p,
                            const unsigned int /*component*/) const
{
        double return_value=0.0;
        return_value = cos(p(0)-p(1));
        return return_value;
}

template <int dim>
double RightHandSide<dim>::value(const Point<dim> &p,
                                 const unsigned int /*component*/) const
{
  double return_value = 0.0;
  return_value+=(p(0)+p(1)*std::cos(p(0)-p(1)));
  return return_value;
}

template <int dim>
double BoundaryValues<dim> :: value(const Point<dim> &p,
                                    const unsigned int /*component*/) const
{
        return p.square();
}

//template <int dim>
//double BoundaryValues<dim>::value(const Point<dim> &p,
//                                const unsigned int /*component*/) const
//{
//  if(p(1)==0) {
//        value=cos(p(0));
//  return value;
//  }
//  if (p(1)==1){
//        value=cos(p(0)-1);
//  return value;
//  }

template <int dim>                                                 // Added the diffusion coefficient values
Tensor<1,dim> Diffusion<dim>::value(const Point<dim> &p) const
{
        Tensor<1,dim> value;
        value[0]=p(0);
        value[1]=p(1);
        return value;
}



template <int dim>
Step4<dim>::Step4(const FiniteElement<dim> &fe,
                  const RefinementMode refinement_mode)
          : dof_handler(triangulation)
          , fe(&fe)
          , refinement_mode(refinement_mode)
{}



//template <int dim>
//void Step4<dim>::make_grid()
//{
//  GridGenerator::hyper_cube(triangulation, 0, 1);
//  triangulation.refine_global(4);

//  std::cout << "   Number of active cells: " << triangulation.n_active_cells()
//          << std::endl
//          << "   Total number of cells: " << triangulation.n_cells()
//            << std::endl;
//}


template <int dim>
void Step4<dim>::setup_system()
{
  dof_handler.distribute_dofs(*fe);
  DoFRenumbering::Cuthill_McKee(dof_handler);

  hanging_node_constraints.clear();
  DoFTools::make_hanging_node_constraints(dof_handler,
                                          hanging_node_constraints);
  hanging_node_constraints.close();

  DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());
  DoFTools::make_sparsity_pattern(dof_handler, dsp);
  hanging_node_constraints.condense(dsp);
  sparsity_pattern.copy_from(dsp);

  system_matrix.reinit(sparsity_pattern);
  solution.reinit(dof_handler.n_dofs());
  system_rhs.reinit(dof_handler.n_dofs());
}



template <int dim>
void Step4<dim>::assemble_system()
{
  QGauss<dim> quadrature_formula(fe->degree + 1);
  QGauss<dim-1> face_quadrature_formula(fe->degree+1);

  const unsigned int n_q_points      = quadrature_formula.size();
  const unsigned int n_face_q_points = face_quadrature_formula.size();

  const unsigned int dofs_per_cell = fe->n_dofs_per_cell();

  Diffusion<dim> diff;
  RightHandSide<dim> right_hand_side;
  Solution<dim> exact_solution;

  FEValues<dim> fe_values(*fe,
                          quadrature_formula,
                          update_values | update_gradients |
                            update_quadrature_points | update_JxW_values);

  FEFaceValues<dim> fe_face_values(*fe,
                                   face_quadrature_formula,
                                   update_values | update_quadrature_points |
                                   update_normal_vectors |
                                   update_JxW_values);

//  const unsigned int dofs_per_cell = fe.n_dofs_per_cell();

  FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);
  Vector<double>     cell_rhs(dofs_per_cell);

  std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);

  for (const auto &cell : dof_handler.active_cell_iterators())
    {
      fe_values.reinit(cell);
      cell_matrix = 0;
      cell_rhs    = 0;
 
      for (const unsigned int q_index : fe_values.quadrature_point_indices()) {
        const Tensor<1,dim> current_coefficient=diff.value(fe_values.quadrature_point(q_index));
        for (const unsigned int i : fe_values.dof_indices())
          {
            for (const unsigned int j : fe_values.dof_indices())
              cell_matrix(i,j)+=                                                                                                                      ((current_coefficient[0] * // Diffusion coefficient
                  fe_values.shape_grad(i, q_index)) * // grad phi_i(x_q)
                 (fe_values.shape_grad(j, q_index) *  // grad phi_j(x_q)
                 (current_coefficient[1])) *
                  fe_values.JxW(q_index));           // dx

            const auto &x_q = fe_values.quadrature_point(q_index);
            cell_rhs(i) += (fe_values.shape_value(i, q_index) * // phi_i(x_q)
                            right_hand_side.value(x_q) *        // f(x_q)
                            fe_values.JxW(q_index));            // dx
          }
      }

      cell->get_dof_indices(local_dof_indices);
      for (const unsigned int i : fe_values.dof_indices())
        {
          for (const unsigned int j : fe_values.dof_indices())
            system_matrix.add(local_dof_indices[i],
                              local_dof_indices[j],
                              cell_matrix(i, j));

            system_rhs(local_dof_indices[i]) += cell_rhs(i);
        }
    }

  hanging_node_constraints.condense(system_matrix);
  hanging_node_constraints.condense(system_rhs);


  std::map<types::global_dof_index, double> boundary_values;
  VectorTools::interpolate_boundary_values(dof_handler,
                                           0,
                                           BoundaryValues<dim>(),
                                           boundary_values);
  MatrixTools::apply_boundary_values(boundary_values,
                                     system_matrix,
                                     solution,                                                                                                                             system_rhs);
}

template <int dim>
void Step4<dim>::solve()
 {
  SolverControl            solver_control(1000, 1e-12);
  SolverCG<Vector<double>> solver(solver_control);
  solver.solve(system_matrix, solution, system_rhs, PreconditionIdentity());

  hanging_node_constraints.distribute(solution);
//  std::cout << "   " << solver_control.last_step()
//          << " CG iterations needed to obtain convergence." << std::endl;
}

template <int dim>
void Step4<dim>::refine_grid()
{
  switch (refinement_mode)
    {
      case global_refinement:
        {
          triangulation.refine_global(1);
          break;
        }
  default:
    {
      Assert(false, ExcNotImplemented());
    }
  }
}

template <int dim>
void Step4<dim>::process_solution(const unsigned int cycle)
{
  Vector<float> difference_per_cell(triangulation.n_active_cells());
  VectorTools::integrate_difference(dof_handler,
                                    solution,
                                    Solution<dim>(),
                                    difference_per_cell,
                                    QGauss<dim>(fe->degree+1),
                                    VectorTools::L2_norm);

  const double L2_error =
    VectorTools::compute_global_error(triangulation,
                                      difference_per_cell,
                                      VectorTools::L2_norm);

//    const QTrapezoid<1>  q_trapez;
//    const QIterated<dim> q_iterated(q_trapez, fe->degree * 2 + 1);
//    VectorTools::integrate_difference(dof_handler,
//                                    solution,
//                                    Solution<dim>(),
//                                    difference_per_cell,
//                                    q_iterated,
//                                    VectorTools::Linfty_norm);
//    const double Linfty_error =
//      VectorTools::compute_global_error(triangulation,
//                                      difference_per_cell,
//                                      VectorTools::Linfty_norm);

    const unsigned int n_active_cells = triangulation.n_active_cells();
    const unsigned int n_dofs         = dof_handler.n_dofs();

    std::cout << "Cycle " << cycle << ':' << std::endl
              << "   Number of active cells:       " << n_active_cells
              << std::endl
              << "   Number of degrees of freedom: " << n_dofs << std::endl;

    convergence_table.add_value("cycle", cycle);
    convergence_table.add_value("cells", n_active_cells);
    convergence_table.add_value("dofs", n_dofs);
    convergence_table.add_value("L2", L2_error);
}


//template <int dim>
//void Step4<dim>::output_results() const
//{
//  DataOut<dim> data_out;

//  data_out.attach_dof_handler(dof_handler);
//  data_out.add_data_vector(solution, "solution");

//  data_out.build_patches();

//  std::ofstream output(dim == 2 ? "solution-2d.vtk":"solution-3d.vtk");
//  data_out.write_vtk(output);
//}

template <int dim>
void Step4<dim>::run()
{
  const unsigned int n_cycles =
    (refinement_mode == global_refinement) ? 5 : 9;
    for (unsigned int cycle = 0; cycle < n_cycles; ++cycle)
      {
        if (cycle == 0)
          {
            GridGenerator::hyper_cube(triangulation, 0., 1.);
            triangulation.refine_global(3);

            for (const auto &cell : triangulation.cell_iterators())
              for (const auto &face : cell->face_iterators())
                {
                  const auto center = face->center();
                  if ((std::fabs(center(0) - (-1.0)) < 1e-12) ||
                      (std::fabs(center(1) - (-1.0)) < 1e-12))
                    face->set_boundary_id(1);
              }
          }
        else
          refine_grid();


        setup_system();

        assemble_system();
        solve();

        process_solution(cycle);
      }
}
int main()
{
  const unsigned int dim = 2;
       using namespace dealii;
       {


         std::cout << "Solving with Q1 elements, global refinement" << std::endl
                   << "===========================================" << std::endl
                   << std::endl;

         FE_Q<dim>             fe(1);
         Step4<dim> helmholtz_problem_2d(
           fe, Step4<dim>::global_refinement);

         helmholtz_problem_2d.run();

         std::cout << std::endl;
       }

         return 0;
}



  
  
          
